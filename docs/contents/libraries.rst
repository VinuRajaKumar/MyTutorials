============================
Static and Dynamic Libraries
============================

A library is a piece of software with a defined set of functions. The library functions can be called in a project by including the header files. The header files contain the signatures of the encaptulated functions. There are two flavours of libraries: static library and dynamic library.

A Static library is included with the application software at link time and if multiple programs running in a comuputer use the same library, each has a separate copy of the same functions from the same library attached with the program.

A Dynamic library is not linked with application during link time. They are loaded and linked to the program during run time. This is a separate piece of software that needs to be taken along with the executable. Even if multiple programes use the same library, only one copy of the dll is loaded to the memory.

Library Extensions
==================

Typically, MicroSoft Visual Studio (MSVC) and the MinGW-gcc are two of the main compilers available under windows platform. MSVC is bigger in size and MinGW-gcc is compact.

======= ========= ===========
Library   MSVC     MinGW-gcc 
------- --------- -----------
Static    lib          a     
------- --------- -----------
Dynamic   dll*         dll   
======= ========= ===========

\* loading of dynamic libraries under MSVC requires an additional import library with an extension ``lib``. This import library is actually a static libtrary and contains stub functions which enable loading of dll.

Compatibility Issues
====================

When you try to use a precompiled library for the first time, a typical problem, you encounter is that you may be able to compile the program and as you try to run it you would face ``undefined symbols <function name> in <library name>``. This is mainly due to the fact that the library could have been generated by a different compiler than the one you are trying to use it.

Most platforms define a C ABI, but don't define a C++ ABI. As a result, each compiler define their own ABI (for everything except the C stuff which is typically there). This yields object files which are incompatible between different compilers. If a library is made only with C ABI, then **normally** MSVC generated libraries can be used with MinGW-gcc and vice versa.

More details are available in,
http://www.mingw.org/wiki/Interoperability_of_Libraries_Created_by_Different_Compiler_Brands
https://www.transmissionzero.co.uk/computing/building-dlls-with-mingw/

Compiling Libraries
===================

.. warning::

	Most of the standard libraries that are offerd in websites for windows platform are meant to be used with MSVC.

If the library is not a C Library, it is important to know the compiler used for generating the particular library.

.. note::

	If source code of the particular library is available, it is always better to **generate the library by the same compiler** with which it is planned to be used.

PC Configuration
================

==================== ================================
Operating System     Windows 10 Home x64
-------------------- --------------------------------
Software Platform    Qt 5.13.0
-------------------- --------------------------------
Compiler             MinGW 64-bit MinGW 7.3.0 64 Bit
-------------------- --------------------------------
MinGW Location       C:\\Qt\\Qt5.13.0\\Tools\\mingw730_64
==================== ================================

The MinGW-gcc compiler was installed by the Qt installer during the Qt installation process. Since, this was tool used to generate Qt libraries, it is better to use the same compiler for generating our libraries.

Open Dynamics Engine with MinGW 7.3.0 64 Bit
============================================

==================== ================================
Library              Open Dynamics Engine (ODE)
-------------------- --------------------------------
Version              0.16.1
-------------------- --------------------------------
IDE    				 Code::Blocks IDE
-------------------- --------------------------------
Compiler             MinGW 7.3.0 64 Bit
==================== ================================

1. Using Code::Blocks

- Download Latest ODE source from https://bitbucket.org/odedevs/ode/downloads/ode-0.16.1.tar.gz and extract the zip file.

- Open a command prompt, navigate to ``ode-0.16.1\\build`` and execute the following command,

.. code-block:: bash

	premake4 --cc=gcc --os=windows --platform=x64 --to=project64 --only-double --with-demos codeblocks

- This creates a folder ``project64`` and generates codeblocks project file to build dynamic and shared libraries of ODE

- Open ``ode.cbp`` and select the same compiler with which you are planning to compile with. By default, if the compiler location is not available in ``PATH`` variable, you need to manually generate a custom compiler configuration. In my case, I created a compiler configuration using the compiler executables available in "C:\\Qt\\Qt5.13.0\\Tools\\mingw730_64"

- You need to select the type of library that you want to build from the target 

- Press Build and wait for the process to complete. It may take 30seconds to 1 minute depending on you computer configuration.



